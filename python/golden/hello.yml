in_source: |-
  hello:
    add_str 12,'hello world!'

  mov r1,12       ; length
  mov r2,hello    ; beginning
  
  loop_print_str:
      jz break_print_str,r1
      inc r2
      print_char r2

      dec r1
      jmp loop_print_str
  
  break_print_str:
      halt
in_stdin: |
out_log: |
  DEBUG   machine:simulation    TICK:   0 PC: 100 ADDR:  13 MEM_OUT: 0 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	mov ['r1', '12']  ('mov r1,12'@4:0)
  DEBUG   machine:simulation    TICK:   1 PC: 101 ADDR:  13 MEM_OUT: 0 rs: 0 rc: 0 r1: 12 r2: 0 r3: 0 	mov ['r2', '0']  ('mov r2,hello'@5:0)
  DEBUG   machine:simulation    TICK:   2 PC: 102 ADDR:  13 MEM_OUT: 0 rs: 0 rc: 0 r1: 12 r2: 0 r3: 0 	jz [107, 'r1']  ('jz break_print_str,r1'@8:0)
  DEBUG   machine:simulation    TICK:   2 PC: 102 ADDR:  13 MEM_OUT: 0 rs: 0 rc: 0 r1: 12 r2: 0 r3: 0 	jz [107, 'r1']  ('jz break_print_str,r1'@8:0)
  DEBUG   machine:simulation    TICK:   3 PC: 103 ADDR:  13 MEM_OUT: 0 rs: 0 rc: 0 r1: 12 r2: 0 r3: 0 	inc ['r2']  ('inc r2'@9:0)
  DEBUG   machine:simulation    TICK:   4 PC: 104 ADDR:  13 MEM_OUT: 0 rs: 0 rc: 0 r1: 12 r2: 1 r3: 0 	print_char ['r2']  ('print_char r2'@10:0)
  DEBUG   machine:signal_output output: '' << 'h'
  DEBUG   machine:simulation    TICK:   5 PC: 105 ADDR:   1 MEM_OUT: 104 rs: 0 rc: 0 r1: 12 r2: 1 r3: 0 	dec ['r1']  ('dec r1'@12:0)
  DEBUG   machine:simulation    TICK:   6 PC: 106 ADDR:   1 MEM_OUT: 104 rs: 0 rc: 0 r1: 11 r2: 1 r3: 0 	jmp 102  ('jmp loop_print_str'@13:0)
  DEBUG   machine:simulation    TICK:   7 PC: 102 ADDR:   1 MEM_OUT: 104 rs: 0 rc: 0 r1: 11 r2: 1 r3: 0 	jz [107, 'r1']  ('jz break_print_str,r1'@8:0)
  DEBUG   machine:simulation    TICK:   7 PC: 102 ADDR:   1 MEM_OUT: 104 rs: 0 rc: 0 r1: 11 r2: 1 r3: 0 	jz [107, 'r1']  ('jz break_print_str,r1'@8:0)
  DEBUG   machine:simulation    TICK:   8 PC: 103 ADDR:   1 MEM_OUT: 104 rs: 0 rc: 0 r1: 11 r2: 1 r3: 0 	inc ['r2']  ('inc r2'@9:0)
  DEBUG   machine:simulation    TICK:   9 PC: 104 ADDR:   1 MEM_OUT: 104 rs: 0 rc: 0 r1: 11 r2: 2 r3: 0 	print_char ['r2']  ('print_char r2'@10:0)
  DEBUG   machine:signal_output output: 'h' << 'e'
  DEBUG   machine:simulation    TICK:  10 PC: 105 ADDR:   2 MEM_OUT: 101 rs: 0 rc: 0 r1: 11 r2: 2 r3: 0 	dec ['r1']  ('dec r1'@12:0)
  DEBUG   machine:simulation    TICK:  11 PC: 106 ADDR:   2 MEM_OUT: 101 rs: 0 rc: 0 r1: 10 r2: 2 r3: 0 	jmp 102  ('jmp loop_print_str'@13:0)
  DEBUG   machine:simulation    TICK:  12 PC: 102 ADDR:   2 MEM_OUT: 101 rs: 0 rc: 0 r1: 10 r2: 2 r3: 0 	jz [107, 'r1']  ('jz break_print_str,r1'@8:0)
  DEBUG   machine:simulation    TICK:  12 PC: 102 ADDR:   2 MEM_OUT: 101 rs: 0 rc: 0 r1: 10 r2: 2 r3: 0 	jz [107, 'r1']  ('jz break_print_str,r1'@8:0)
  DEBUG   machine:simulation    TICK:  13 PC: 103 ADDR:   2 MEM_OUT: 101 rs: 0 rc: 0 r1: 10 r2: 2 r3: 0 	inc ['r2']  ('inc r2'@9:0)
  DEBUG   machine:simulation    TICK:  14 PC: 104 ADDR:   2 MEM_OUT: 101 rs: 0 rc: 0 r1: 10 r2: 3 r3: 0 	print_char ['r2']  ('print_char r2'@10:0)
  DEBUG   machine:signal_output output: 'he' << 'l'
  DEBUG   machine:simulation    TICK:  15 PC: 105 ADDR:   3 MEM_OUT: 108 rs: 0 rc: 0 r1: 10 r2: 3 r3: 0 	dec ['r1']  ('dec r1'@12:0)
  DEBUG   machine:simulation    TICK:  16 PC: 106 ADDR:   3 MEM_OUT: 108 rs: 0 rc: 0 r1: 9 r2: 3 r3: 0 	jmp 102  ('jmp loop_print_str'@13:0)
  DEBUG   machine:simulation    TICK:  17 PC: 102 ADDR:   3 MEM_OUT: 108 rs: 0 rc: 0 r1: 9 r2: 3 r3: 0 	jz [107, 'r1']  ('jz break_print_str,r1'@8:0)
  DEBUG   machine:simulation    TICK:  17 PC: 102 ADDR:   3 MEM_OUT: 108 rs: 0 rc: 0 r1: 9 r2: 3 r3: 0 	jz [107, 'r1']  ('jz break_print_str,r1'@8:0)
  DEBUG   machine:simulation    TICK:  18 PC: 103 ADDR:   3 MEM_OUT: 108 rs: 0 rc: 0 r1: 9 r2: 3 r3: 0 	inc ['r2']  ('inc r2'@9:0)
  DEBUG   machine:simulation    TICK:  19 PC: 104 ADDR:   3 MEM_OUT: 108 rs: 0 rc: 0 r1: 9 r2: 4 r3: 0 	print_char ['r2']  ('print_char r2'@10:0)
  DEBUG   machine:signal_output output: 'hel' << 'l'
  DEBUG   machine:simulation    TICK:  20 PC: 105 ADDR:   4 MEM_OUT: 108 rs: 0 rc: 0 r1: 9 r2: 4 r3: 0 	dec ['r1']  ('dec r1'@12:0)
  DEBUG   machine:simulation    TICK:  21 PC: 106 ADDR:   4 MEM_OUT: 108 rs: 0 rc: 0 r1: 8 r2: 4 r3: 0 	jmp 102  ('jmp loop_print_str'@13:0)
  DEBUG   machine:simulation    TICK:  22 PC: 102 ADDR:   4 MEM_OUT: 108 rs: 0 rc: 0 r1: 8 r2: 4 r3: 0 	jz [107, 'r1']  ('jz break_print_str,r1'@8:0)
  DEBUG   machine:simulation    TICK:  22 PC: 102 ADDR:   4 MEM_OUT: 108 rs: 0 rc: 0 r1: 8 r2: 4 r3: 0 	jz [107, 'r1']  ('jz break_print_str,r1'@8:0)
  DEBUG   machine:simulation    TICK:  23 PC: 103 ADDR:   4 MEM_OUT: 108 rs: 0 rc: 0 r1: 8 r2: 4 r3: 0 	inc ['r2']  ('inc r2'@9:0)
  DEBUG   machine:simulation    TICK:  24 PC: 104 ADDR:   4 MEM_OUT: 108 rs: 0 rc: 0 r1: 8 r2: 5 r3: 0 	print_char ['r2']  ('print_char r2'@10:0)
  DEBUG   machine:signal_output output: 'hell' << 'o'
  DEBUG   machine:simulation    TICK:  25 PC: 105 ADDR:   5 MEM_OUT: 111 rs: 0 rc: 0 r1: 8 r2: 5 r3: 0 	dec ['r1']  ('dec r1'@12:0)
  DEBUG   machine:simulation    TICK:  26 PC: 106 ADDR:   5 MEM_OUT: 111 rs: 0 rc: 0 r1: 7 r2: 5 r3: 0 	jmp 102  ('jmp loop_print_str'@13:0)
  DEBUG   machine:simulation    TICK:  27 PC: 102 ADDR:   5 MEM_OUT: 111 rs: 0 rc: 0 r1: 7 r2: 5 r3: 0 	jz [107, 'r1']  ('jz break_print_str,r1'@8:0)
  DEBUG   machine:simulation    TICK:  27 PC: 102 ADDR:   5 MEM_OUT: 111 rs: 0 rc: 0 r1: 7 r2: 5 r3: 0 	jz [107, 'r1']  ('jz break_print_str,r1'@8:0)
  DEBUG   machine:simulation    TICK:  28 PC: 103 ADDR:   5 MEM_OUT: 111 rs: 0 rc: 0 r1: 7 r2: 5 r3: 0 	inc ['r2']  ('inc r2'@9:0)
  DEBUG   machine:simulation    TICK:  29 PC: 104 ADDR:   5 MEM_OUT: 111 rs: 0 rc: 0 r1: 7 r2: 6 r3: 0 	print_char ['r2']  ('print_char r2'@10:0)
  DEBUG   machine:signal_output output: 'hello' << ' '
  DEBUG   machine:simulation    TICK:  30 PC: 105 ADDR:   6 MEM_OUT: 32 rs: 0 rc: 0 r1: 7 r2: 6 r3: 0 	dec ['r1']  ('dec r1'@12:0)
  DEBUG   machine:simulation    TICK:  31 PC: 106 ADDR:   6 MEM_OUT: 32 rs: 0 rc: 0 r1: 6 r2: 6 r3: 0 	jmp 102  ('jmp loop_print_str'@13:0)
  DEBUG   machine:simulation    TICK:  32 PC: 102 ADDR:   6 MEM_OUT: 32 rs: 0 rc: 0 r1: 6 r2: 6 r3: 0 	jz [107, 'r1']  ('jz break_print_str,r1'@8:0)
  DEBUG   machine:simulation    TICK:  32 PC: 102 ADDR:   6 MEM_OUT: 32 rs: 0 rc: 0 r1: 6 r2: 6 r3: 0 	jz [107, 'r1']  ('jz break_print_str,r1'@8:0)
  DEBUG   machine:simulation    TICK:  33 PC: 103 ADDR:   6 MEM_OUT: 32 rs: 0 rc: 0 r1: 6 r2: 6 r3: 0 	inc ['r2']  ('inc r2'@9:0)
  DEBUG   machine:simulation    TICK:  34 PC: 104 ADDR:   6 MEM_OUT: 32 rs: 0 rc: 0 r1: 6 r2: 7 r3: 0 	print_char ['r2']  ('print_char r2'@10:0)
  DEBUG   machine:signal_output output: 'hello ' << 'w'
  DEBUG   machine:simulation    TICK:  35 PC: 105 ADDR:   7 MEM_OUT: 119 rs: 0 rc: 0 r1: 6 r2: 7 r3: 0 	dec ['r1']  ('dec r1'@12:0)
  DEBUG   machine:simulation    TICK:  36 PC: 106 ADDR:   7 MEM_OUT: 119 rs: 0 rc: 0 r1: 5 r2: 7 r3: 0 	jmp 102  ('jmp loop_print_str'@13:0)
  DEBUG   machine:simulation    TICK:  37 PC: 102 ADDR:   7 MEM_OUT: 119 rs: 0 rc: 0 r1: 5 r2: 7 r3: 0 	jz [107, 'r1']  ('jz break_print_str,r1'@8:0)
  DEBUG   machine:simulation    TICK:  37 PC: 102 ADDR:   7 MEM_OUT: 119 rs: 0 rc: 0 r1: 5 r2: 7 r3: 0 	jz [107, 'r1']  ('jz break_print_str,r1'@8:0)
  DEBUG   machine:simulation    TICK:  38 PC: 103 ADDR:   7 MEM_OUT: 119 rs: 0 rc: 0 r1: 5 r2: 7 r3: 0 	inc ['r2']  ('inc r2'@9:0)
  DEBUG   machine:simulation    TICK:  39 PC: 104 ADDR:   7 MEM_OUT: 119 rs: 0 rc: 0 r1: 5 r2: 8 r3: 0 	print_char ['r2']  ('print_char r2'@10:0)
  DEBUG   machine:signal_output output: 'hello w' << 'o'
  DEBUG   machine:simulation    TICK:  40 PC: 105 ADDR:   8 MEM_OUT: 111 rs: 0 rc: 0 r1: 5 r2: 8 r3: 0 	dec ['r1']  ('dec r1'@12:0)
  DEBUG   machine:simulation    TICK:  41 PC: 106 ADDR:   8 MEM_OUT: 111 rs: 0 rc: 0 r1: 4 r2: 8 r3: 0 	jmp 102  ('jmp loop_print_str'@13:0)
  DEBUG   machine:simulation    TICK:  42 PC: 102 ADDR:   8 MEM_OUT: 111 rs: 0 rc: 0 r1: 4 r2: 8 r3: 0 	jz [107, 'r1']  ('jz break_print_str,r1'@8:0)
  DEBUG   machine:simulation    TICK:  42 PC: 102 ADDR:   8 MEM_OUT: 111 rs: 0 rc: 0 r1: 4 r2: 8 r3: 0 	jz [107, 'r1']  ('jz break_print_str,r1'@8:0)
  DEBUG   machine:simulation    TICK:  43 PC: 103 ADDR:   8 MEM_OUT: 111 rs: 0 rc: 0 r1: 4 r2: 8 r3: 0 	inc ['r2']  ('inc r2'@9:0)
  DEBUG   machine:simulation    TICK:  44 PC: 104 ADDR:   8 MEM_OUT: 111 rs: 0 rc: 0 r1: 4 r2: 9 r3: 0 	print_char ['r2']  ('print_char r2'@10:0)
  DEBUG   machine:signal_output output: 'hello wo' << 'r'
  DEBUG   machine:simulation    TICK:  45 PC: 105 ADDR:   9 MEM_OUT: 114 rs: 0 rc: 0 r1: 4 r2: 9 r3: 0 	dec ['r1']  ('dec r1'@12:0)
  DEBUG   machine:simulation    TICK:  46 PC: 106 ADDR:   9 MEM_OUT: 114 rs: 0 rc: 0 r1: 3 r2: 9 r3: 0 	jmp 102  ('jmp loop_print_str'@13:0)
  DEBUG   machine:simulation    TICK:  47 PC: 102 ADDR:   9 MEM_OUT: 114 rs: 0 rc: 0 r1: 3 r2: 9 r3: 0 	jz [107, 'r1']  ('jz break_print_str,r1'@8:0)
  DEBUG   machine:simulation    TICK:  47 PC: 102 ADDR:   9 MEM_OUT: 114 rs: 0 rc: 0 r1: 3 r2: 9 r3: 0 	jz [107, 'r1']  ('jz break_print_str,r1'@8:0)
  DEBUG   machine:simulation    TICK:  48 PC: 103 ADDR:   9 MEM_OUT: 114 rs: 0 rc: 0 r1: 3 r2: 9 r3: 0 	inc ['r2']  ('inc r2'@9:0)
  DEBUG   machine:simulation    TICK:  49 PC: 104 ADDR:   9 MEM_OUT: 114 rs: 0 rc: 0 r1: 3 r2: 10 r3: 0 	print_char ['r2']  ('print_char r2'@10:0)
  DEBUG   machine:signal_output output: 'hello wor' << 'l'
  DEBUG   machine:simulation    TICK:  50 PC: 105 ADDR:  10 MEM_OUT: 108 rs: 0 rc: 0 r1: 3 r2: 10 r3: 0 	dec ['r1']  ('dec r1'@12:0)
  DEBUG   machine:simulation    TICK:  51 PC: 106 ADDR:  10 MEM_OUT: 108 rs: 0 rc: 0 r1: 2 r2: 10 r3: 0 	jmp 102  ('jmp loop_print_str'@13:0)
  DEBUG   machine:simulation    TICK:  52 PC: 102 ADDR:  10 MEM_OUT: 108 rs: 0 rc: 0 r1: 2 r2: 10 r3: 0 	jz [107, 'r1']  ('jz break_print_str,r1'@8:0)
  DEBUG   machine:simulation    TICK:  52 PC: 102 ADDR:  10 MEM_OUT: 108 rs: 0 rc: 0 r1: 2 r2: 10 r3: 0 	jz [107, 'r1']  ('jz break_print_str,r1'@8:0)
  DEBUG   machine:simulation    TICK:  53 PC: 103 ADDR:  10 MEM_OUT: 108 rs: 0 rc: 0 r1: 2 r2: 10 r3: 0 	inc ['r2']  ('inc r2'@9:0)
  DEBUG   machine:simulation    TICK:  54 PC: 104 ADDR:  10 MEM_OUT: 108 rs: 0 rc: 0 r1: 2 r2: 11 r3: 0 	print_char ['r2']  ('print_char r2'@10:0)
  DEBUG   machine:signal_output output: 'hello worl' << 'd'
  DEBUG   machine:simulation    TICK:  55 PC: 105 ADDR:  11 MEM_OUT: 100 rs: 0 rc: 0 r1: 2 r2: 11 r3: 0 	dec ['r1']  ('dec r1'@12:0)
  DEBUG   machine:simulation    TICK:  56 PC: 106 ADDR:  11 MEM_OUT: 100 rs: 0 rc: 0 r1: 1 r2: 11 r3: 0 	jmp 102  ('jmp loop_print_str'@13:0)
  DEBUG   machine:simulation    TICK:  57 PC: 102 ADDR:  11 MEM_OUT: 100 rs: 0 rc: 0 r1: 1 r2: 11 r3: 0 	jz [107, 'r1']  ('jz break_print_str,r1'@8:0)
  DEBUG   machine:simulation    TICK:  57 PC: 102 ADDR:  11 MEM_OUT: 100 rs: 0 rc: 0 r1: 1 r2: 11 r3: 0 	jz [107, 'r1']  ('jz break_print_str,r1'@8:0)
  DEBUG   machine:simulation    TICK:  58 PC: 103 ADDR:  11 MEM_OUT: 100 rs: 0 rc: 0 r1: 1 r2: 11 r3: 0 	inc ['r2']  ('inc r2'@9:0)
  DEBUG   machine:simulation    TICK:  59 PC: 104 ADDR:  11 MEM_OUT: 100 rs: 0 rc: 0 r1: 1 r2: 12 r3: 0 	print_char ['r2']  ('print_char r2'@10:0)
  DEBUG   machine:signal_output output: 'hello world' << '!'
  DEBUG   machine:simulation    TICK:  60 PC: 105 ADDR:  12 MEM_OUT: 33 rs: 0 rc: 0 r1: 1 r2: 12 r3: 0 	dec ['r1']  ('dec r1'@12:0)
  DEBUG   machine:simulation    TICK:  61 PC: 106 ADDR:  12 MEM_OUT: 33 rs: 0 rc: 0 r1: 0 r2: 12 r3: 0 	jmp 102  ('jmp loop_print_str'@13:0)
  DEBUG   machine:simulation    TICK:  62 PC: 102 ADDR:  12 MEM_OUT: 33 rs: 0 rc: 0 r1: 0 r2: 12 r3: 0 	jz [107, 'r1']  ('jz break_print_str,r1'@8:0)
  DEBUG   machine:simulation    TICK:  62 PC: 102 ADDR:  12 MEM_OUT: 33 rs: 0 rc: 0 r1: 0 r2: 12 r3: 0 	jz [107, 'r1']  ('jz break_print_str,r1'@8:0)
  DEBUG   machine:simulation    TICK:  63 PC: 107 ADDR:  12 MEM_OUT: 33 rs: 0 rc: 0 r1: 0 r2: 12 r3: 0 	halt  ('halt'@16:0)
  INFO    machine:simulation    output_buffer: 'hello world!'
out_stdout: |
  source LoC: 16 code instr: 8
  ============================================================
  hello world!
  instr_counter:  63 ticks: 63
out_code: |-
  [{"index": 0, "opcode": "mov", "arg": ["r1", "12"], "term": [4, 0, "mov r1,12"]},
   {"index": 1, "opcode": "mov", "arg": ["r2", "0"], "term": [5, 0, "mov r2,hello"]},
   {"index": 2, "opcode": "jz", "arg": [7, "r1"], "term": [8, 0, "jz break_print_str,r1"]},
   {"index": 3, "opcode": "inc", "arg": ["r2"], "term": [9, 0, "inc r2"]},
   {"index": 4, "opcode": "print_char", "arg": ["r2"], "term": [10, 0, "print_char r2"]},
   {"index": 5, "opcode": "dec", "arg": ["r1"], "term": [12, 0, "dec r1"]},
   {"index": 6, "opcode": "jmp", "arg": 2, "term": [13, 0, "jmp loop_print_str"]},
   {"index": 7, "opcode": "halt", "term": [16, 0, "halt"]}]
