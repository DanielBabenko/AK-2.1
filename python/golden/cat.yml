in_source: |-
  mov r7,input_size
  input
  loop:
      jz break,r7
      print
      right
      input
      dec r7
      jmp loop
  break:
      halt
in_stdin: |-
  Fifty two!
out_code: |-
    [{"index": 0, "opcode": "mov", "arg": ["r7", "input_size"], "term": [1, 0, "mov r7,input_size"]},
     {"index": 1, "opcode": "input", "term": [2, 0, "input"]},
     {"index": 2, "opcode": "jz", "arg": [8, "r7"], "term": [4, 0, "jz break,r7"]},
     {"index": 3, "opcode": "print", "term": [5, 0, "print"]},
     {"index": 4, "opcode": "right", "term": [6, 0, "right"]},
     {"index": 5, "opcode": "input", "term": [7, 0, "input"]},
     {"index": 6, "opcode": "dec", "arg": ["r7"], "term": [8, 0, "dec r7"]},
     {"index": 7, "opcode": "jmp", "arg": 2, "term": [9, 0, "jmp loop"]},
     {"index": 8, "opcode": "halt", "term": [11, 0, "halt"]}]
out_stdout: |
  source LoC: 11 code instr: 9
  ============================================================
  Fifty two!
  instr_counter:  63 ticks: 73
out_log: |
  DEBUG   machine:simulation    TICK:   0 PC:   0 ADDR:   0 MEM_OUT: 0 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	mov ['r7', 'input_size']  ('mov r7,input_size'@1:0)
  DEBUG   machine:simulation    TICK:   1 PC:   1 ADDR:   0 MEM_OUT: 0 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	input  ('input'@2:0)
  DEBUG   machine:signal_wr     input: 'F'
  DEBUG   machine:simulation    TICK:   2 PC:   2 ADDR:   0 MEM_OUT: 70 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	jz [8, 'r7']  ('jz break,r7'@4:0)
  DEBUG   machine:simulation    TICK:   2 PC:   2 ADDR:   0 MEM_OUT: 70 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	jz [8, 'r7']  ('jz break,r7'@4:0)
  DEBUG   machine:simulation    TICK:   3 PC:   3 ADDR:   0 MEM_OUT: 70 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	print  ('print'@5:0)
  DEBUG   machine:simulation    TICK:   4 PC:   3 ADDR:   0 MEM_OUT: 70 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	print  ('print'@5:0)
  DEBUG   machine:signal_output output: '' << 'F'
  DEBUG   machine:simulation    TICK:   5 PC:   4 ADDR:   0 MEM_OUT: 70 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	right  ('right'@6:0)
  DEBUG   machine:simulation    TICK:   6 PC:   5 ADDR:   1 MEM_OUT: 0 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	input  ('input'@7:0)
  DEBUG   machine:signal_wr     input: 'i'
  DEBUG   machine:simulation    TICK:   7 PC:   6 ADDR:   1 MEM_OUT: 105 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	dec ['r7']  ('dec r7'@8:0)
  DEBUG   machine:simulation    TICK:   8 PC:   7 ADDR:   1 MEM_OUT: 105 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	jmp 2  ('jmp loop'@9:0)
  DEBUG   machine:simulation    TICK:   9 PC:   2 ADDR:   1 MEM_OUT: 105 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	jz [8, 'r7']  ('jz break,r7'@4:0)
  DEBUG   machine:simulation    TICK:   9 PC:   2 ADDR:   1 MEM_OUT: 105 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	jz [8, 'r7']  ('jz break,r7'@4:0)
  DEBUG   machine:simulation    TICK:  10 PC:   3 ADDR:   1 MEM_OUT: 105 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	print  ('print'@5:0)
  DEBUG   machine:simulation    TICK:  11 PC:   3 ADDR:   1 MEM_OUT: 105 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	print  ('print'@5:0)
  DEBUG   machine:signal_output output: 'F' << 'i'
  DEBUG   machine:simulation    TICK:  12 PC:   4 ADDR:   1 MEM_OUT: 105 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	right  ('right'@6:0)
  DEBUG   machine:simulation    TICK:  13 PC:   5 ADDR:   2 MEM_OUT: 0 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	input  ('input'@7:0)
  DEBUG   machine:signal_wr     input: 'f'
  DEBUG   machine:simulation    TICK:  14 PC:   6 ADDR:   2 MEM_OUT: 102 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	dec ['r7']  ('dec r7'@8:0)
  DEBUG   machine:simulation    TICK:  15 PC:   7 ADDR:   2 MEM_OUT: 102 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	jmp 2  ('jmp loop'@9:0)
  DEBUG   machine:simulation    TICK:  16 PC:   2 ADDR:   2 MEM_OUT: 102 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	jz [8, 'r7']  ('jz break,r7'@4:0)
  DEBUG   machine:simulation    TICK:  16 PC:   2 ADDR:   2 MEM_OUT: 102 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	jz [8, 'r7']  ('jz break,r7'@4:0)
  DEBUG   machine:simulation    TICK:  17 PC:   3 ADDR:   2 MEM_OUT: 102 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	print  ('print'@5:0)
  DEBUG   machine:simulation    TICK:  18 PC:   3 ADDR:   2 MEM_OUT: 102 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	print  ('print'@5:0)
  DEBUG   machine:signal_output output: 'Fi' << 'f'
  DEBUG   machine:simulation    TICK:  19 PC:   4 ADDR:   2 MEM_OUT: 102 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	right  ('right'@6:0)
  DEBUG   machine:simulation    TICK:  20 PC:   5 ADDR:   3 MEM_OUT: 0 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	input  ('input'@7:0)
  DEBUG   machine:signal_wr     input: 't'
  DEBUG   machine:simulation    TICK:  21 PC:   6 ADDR:   3 MEM_OUT: 116 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	dec ['r7']  ('dec r7'@8:0)
  DEBUG   machine:simulation    TICK:  22 PC:   7 ADDR:   3 MEM_OUT: 116 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	jmp 2  ('jmp loop'@9:0)
  DEBUG   machine:simulation    TICK:  23 PC:   2 ADDR:   3 MEM_OUT: 116 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	jz [8, 'r7']  ('jz break,r7'@4:0)
  DEBUG   machine:simulation    TICK:  23 PC:   2 ADDR:   3 MEM_OUT: 116 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	jz [8, 'r7']  ('jz break,r7'@4:0)
  DEBUG   machine:simulation    TICK:  24 PC:   3 ADDR:   3 MEM_OUT: 116 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	print  ('print'@5:0)
  DEBUG   machine:simulation    TICK:  25 PC:   3 ADDR:   3 MEM_OUT: 116 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	print  ('print'@5:0)
  DEBUG   machine:signal_output output: 'Fif' << 't'
  DEBUG   machine:simulation    TICK:  26 PC:   4 ADDR:   3 MEM_OUT: 116 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	right  ('right'@6:0)
  DEBUG   machine:simulation    TICK:  27 PC:   5 ADDR:   4 MEM_OUT: 0 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	input  ('input'@7:0)
  DEBUG   machine:signal_wr     input: 'y'
  DEBUG   machine:simulation    TICK:  28 PC:   6 ADDR:   4 MEM_OUT: 121 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	dec ['r7']  ('dec r7'@8:0)
  DEBUG   machine:simulation    TICK:  29 PC:   7 ADDR:   4 MEM_OUT: 121 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	jmp 2  ('jmp loop'@9:0)
  DEBUG   machine:simulation    TICK:  30 PC:   2 ADDR:   4 MEM_OUT: 121 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	jz [8, 'r7']  ('jz break,r7'@4:0)
  DEBUG   machine:simulation    TICK:  30 PC:   2 ADDR:   4 MEM_OUT: 121 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	jz [8, 'r7']  ('jz break,r7'@4:0)
  DEBUG   machine:simulation    TICK:  31 PC:   3 ADDR:   4 MEM_OUT: 121 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	print  ('print'@5:0)
  DEBUG   machine:simulation    TICK:  32 PC:   3 ADDR:   4 MEM_OUT: 121 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	print  ('print'@5:0)
  DEBUG   machine:signal_output output: 'Fift' << 'y'
  DEBUG   machine:simulation    TICK:  33 PC:   4 ADDR:   4 MEM_OUT: 121 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	right  ('right'@6:0)
  DEBUG   machine:simulation    TICK:  34 PC:   5 ADDR:   5 MEM_OUT: 0 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	input  ('input'@7:0)
  DEBUG   machine:signal_wr     input: ' '
  DEBUG   machine:simulation    TICK:  35 PC:   6 ADDR:   5 MEM_OUT: 32 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	dec ['r7']  ('dec r7'@8:0)
  DEBUG   machine:simulation    TICK:  36 PC:   7 ADDR:   5 MEM_OUT: 32 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	jmp 2  ('jmp loop'@9:0)
  DEBUG   machine:simulation    TICK:  37 PC:   2 ADDR:   5 MEM_OUT: 32 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	jz [8, 'r7']  ('jz break,r7'@4:0)
  DEBUG   machine:simulation    TICK:  37 PC:   2 ADDR:   5 MEM_OUT: 32 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	jz [8, 'r7']  ('jz break,r7'@4:0)
  DEBUG   machine:simulation    TICK:  38 PC:   3 ADDR:   5 MEM_OUT: 32 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	print  ('print'@5:0)
  DEBUG   machine:simulation    TICK:  39 PC:   3 ADDR:   5 MEM_OUT: 32 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	print  ('print'@5:0)
  DEBUG   machine:signal_output output: 'Fifty' << ' '
  DEBUG   machine:simulation    TICK:  40 PC:   4 ADDR:   5 MEM_OUT: 32 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	right  ('right'@6:0)
  DEBUG   machine:simulation    TICK:  41 PC:   5 ADDR:   6 MEM_OUT: 0 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	input  ('input'@7:0)
  DEBUG   machine:signal_wr     input: 't'
  DEBUG   machine:simulation    TICK:  42 PC:   6 ADDR:   6 MEM_OUT: 116 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	dec ['r7']  ('dec r7'@8:0)
  DEBUG   machine:simulation    TICK:  43 PC:   7 ADDR:   6 MEM_OUT: 116 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	jmp 2  ('jmp loop'@9:0)
  DEBUG   machine:simulation    TICK:  44 PC:   2 ADDR:   6 MEM_OUT: 116 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	jz [8, 'r7']  ('jz break,r7'@4:0)
  DEBUG   machine:simulation    TICK:  44 PC:   2 ADDR:   6 MEM_OUT: 116 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	jz [8, 'r7']  ('jz break,r7'@4:0)
  DEBUG   machine:simulation    TICK:  45 PC:   3 ADDR:   6 MEM_OUT: 116 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	print  ('print'@5:0)
  DEBUG   machine:simulation    TICK:  46 PC:   3 ADDR:   6 MEM_OUT: 116 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	print  ('print'@5:0)
  DEBUG   machine:signal_output output: 'Fifty ' << 't'
  DEBUG   machine:simulation    TICK:  47 PC:   4 ADDR:   6 MEM_OUT: 116 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	right  ('right'@6:0)
  DEBUG   machine:simulation    TICK:  48 PC:   5 ADDR:   7 MEM_OUT: 0 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	input  ('input'@7:0)
  DEBUG   machine:signal_wr     input: 'w'
  DEBUG   machine:simulation    TICK:  49 PC:   6 ADDR:   7 MEM_OUT: 119 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	dec ['r7']  ('dec r7'@8:0)
  DEBUG   machine:simulation    TICK:  50 PC:   7 ADDR:   7 MEM_OUT: 119 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	jmp 2  ('jmp loop'@9:0)
  DEBUG   machine:simulation    TICK:  51 PC:   2 ADDR:   7 MEM_OUT: 119 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	jz [8, 'r7']  ('jz break,r7'@4:0)
  DEBUG   machine:simulation    TICK:  51 PC:   2 ADDR:   7 MEM_OUT: 119 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	jz [8, 'r7']  ('jz break,r7'@4:0)
  DEBUG   machine:simulation    TICK:  52 PC:   3 ADDR:   7 MEM_OUT: 119 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	print  ('print'@5:0)
  DEBUG   machine:simulation    TICK:  53 PC:   3 ADDR:   7 MEM_OUT: 119 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	print  ('print'@5:0)
  DEBUG   machine:signal_output output: 'Fifty t' << 'w'
  DEBUG   machine:simulation    TICK:  54 PC:   4 ADDR:   7 MEM_OUT: 119 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	right  ('right'@6:0)
  DEBUG   machine:simulation    TICK:  55 PC:   5 ADDR:   8 MEM_OUT: 0 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	input  ('input'@7:0)
  DEBUG   machine:signal_wr     input: 'o'
  DEBUG   machine:simulation    TICK:  56 PC:   6 ADDR:   8 MEM_OUT: 111 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	dec ['r7']  ('dec r7'@8:0)
  DEBUG   machine:simulation    TICK:  57 PC:   7 ADDR:   8 MEM_OUT: 111 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	jmp 2  ('jmp loop'@9:0)
  DEBUG   machine:simulation    TICK:  58 PC:   2 ADDR:   8 MEM_OUT: 111 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	jz [8, 'r7']  ('jz break,r7'@4:0)
  DEBUG   machine:simulation    TICK:  58 PC:   2 ADDR:   8 MEM_OUT: 111 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	jz [8, 'r7']  ('jz break,r7'@4:0)
  DEBUG   machine:simulation    TICK:  59 PC:   3 ADDR:   8 MEM_OUT: 111 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	print  ('print'@5:0)
  DEBUG   machine:simulation    TICK:  60 PC:   3 ADDR:   8 MEM_OUT: 111 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	print  ('print'@5:0)
  DEBUG   machine:signal_output output: 'Fifty tw' << 'o'
  DEBUG   machine:simulation    TICK:  61 PC:   4 ADDR:   8 MEM_OUT: 111 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	right  ('right'@6:0)
  DEBUG   machine:simulation    TICK:  62 PC:   5 ADDR:   9 MEM_OUT: 0 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	input  ('input'@7:0)
  DEBUG   machine:signal_wr     input: '!'
  DEBUG   machine:simulation    TICK:  63 PC:   6 ADDR:   9 MEM_OUT: 33 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	dec ['r7']  ('dec r7'@8:0)
  DEBUG   machine:simulation    TICK:  64 PC:   7 ADDR:   9 MEM_OUT: 33 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	jmp 2  ('jmp loop'@9:0)
  DEBUG   machine:simulation    TICK:  65 PC:   2 ADDR:   9 MEM_OUT: 33 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	jz [8, 'r7']  ('jz break,r7'@4:0)
  DEBUG   machine:simulation    TICK:  65 PC:   2 ADDR:   9 MEM_OUT: 33 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	jz [8, 'r7']  ('jz break,r7'@4:0)
  DEBUG   machine:simulation    TICK:  66 PC:   3 ADDR:   9 MEM_OUT: 33 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	print  ('print'@5:0)
  DEBUG   machine:simulation    TICK:  67 PC:   3 ADDR:   9 MEM_OUT: 33 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	print  ('print'@5:0)
  DEBUG   machine:signal_output output: 'Fifty two' << '!'
  DEBUG   machine:simulation    TICK:  68 PC:   4 ADDR:   9 MEM_OUT: 33 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	right  ('right'@6:0)
  DEBUG   machine:simulation    TICK:  69 PC:   5 ADDR:  10 MEM_OUT: 0 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	input  ('input'@7:0)
  DEBUG   machine:signal_wr     input: '!'
  DEBUG   machine:simulation    TICK:  70 PC:   6 ADDR:  10 MEM_OUT: 33 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	dec ['r7']  ('dec r7'@8:0)
  DEBUG   machine:simulation    TICK:  71 PC:   7 ADDR:  10 MEM_OUT: 33 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	jmp 2  ('jmp loop'@9:0)
  DEBUG   machine:simulation    TICK:  72 PC:   2 ADDR:  10 MEM_OUT: 33 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	jz [8, 'r7']  ('jz break,r7'@4:0)
  DEBUG   machine:simulation    TICK:  72 PC:   2 ADDR:  10 MEM_OUT: 33 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	jz [8, 'r7']  ('jz break,r7'@4:0)
  DEBUG   machine:simulation    TICK:  73 PC:   8 ADDR:  10 MEM_OUT: 33 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	halt  ('halt'@11:0)
  INFO    machine:simulation    output_buffer: 'Fifty two!'
