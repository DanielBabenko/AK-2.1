in_source: |-
  mov r1,1
  mov r2,2
  add rs,r1,r2
  halt

in_stdin: |
out_log: |
  DEBUG   machine:simulation    TICK:   0 PC:   0 ADDR:   0 MEM_OUT: 0 rs: 0 rc: 0 r1: 0 r2: 0 r3: 0 	mov ['r1', '1']  ('mov r1,1'@1:0)
  DEBUG   machine:simulation    TICK:   1 PC:   1 ADDR:   0 MEM_OUT: 0 rs: 0 rc: 0 r1: 1 r2: 0 r3: 0 	mov ['r2', '2']  ('mov r2,2'@2:0)
  DEBUG   machine:simulation    TICK:   2 PC:   2 ADDR:   0 MEM_OUT: 0 rs: 0 rc: 0 r1: 1 r2: 2 r3: 0 	add ['rs', 'r1', 'r2']  ('add rs,r1,r2'@3:0)
  DEBUG   machine:simulation    TICK:   3 PC:   3 ADDR:   0 MEM_OUT: 0 rs: 3 rc: 0 r1: 1 r2: 2 r3: 0 	halt  ('halt'@4:0)
  INFO    machine:simulation    output_buffer: ''

out_stdout: |
  source LoC: 4 code instr: 4
  ============================================================

  instr_counter:  3 ticks: 3
out_code: |-
  [{"index": 0, "opcode": "mov", "arg": ["r1", "1"], "term": [1, 0, "mov r1,1"]},
   {"index": 1, "opcode": "mov", "arg": ["r2", "2"], "term": [2, 0, "mov r2,2"]},
   {"index": 2, "opcode": "add", "arg": ["rs", "r1", "r2"], "term": [3, 0, "add rs,r1,r2"]},
   {"index": 3, "opcode": "halt", "term": [4, 0, "halt"]}]